# Generated by Django 4.1.1 on 2022-09-17 20:17

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('bookmark_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'bookmark',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.IntegerField(primary_key=True, serialize=False)),
                ('contents', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('follow_id', models.IntegerField(primary_key=True, serialize=False)),
                ('following_user_id', models.IntegerField()),
                ('follower_user_id', models.IntegerField()),
            ],
            options={
                'db_table': 'follow',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Keywords',
            fields=[
                ('keywords_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'keywords',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Picture',
            fields=[
                ('picture_id', models.IntegerField(primary_key=True, serialize=False)),
                ('image', models.CharField(max_length=500)),
            ],
            options={
                'db_table': 'picture',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('place_id', models.IntegerField(primary_key=True, serialize=False)),
                ('addr', models.CharField(max_length=45)),
                ('title', models.CharField(max_length=45)),
                ('image', models.CharField(max_length=500)),
                ('mapx', models.CharField(max_length=45)),
                ('mapy', models.CharField(max_length=45)),
                ('score', models.IntegerField()),
                ('content_id', models.IntegerField()),
                ('overview', models.CharField(max_length=500)),
            ],
            options={
                'db_table': 'place',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlaceCategory',
            fields=[
                ('category_id', models.IntegerField(primary_key=True, serialize=False)),
                ('category_name', models.CharField(max_length=45)),
                ('content_type_id', models.IntegerField()),
            ],
            options={
                'db_table': 'place_category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlaceKeywords',
            fields=[
                ('place_keywords_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'place_keywords',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlaceRegion',
            fields=[
                ('region_id', models.IntegerField(primary_key=True, serialize=False)),
                ('area_code', models.IntegerField()),
                ('do_gwangyuksi', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'place_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('review_id', models.IntegerField(primary_key=True, serialize=False)),
                ('contents', models.CharField(max_length=200)),
                ('image', models.CharField(max_length=255)),
                ('score', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('visited_at', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'review',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reviewlike',
            fields=[
                ('like_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'reviewlike',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
                ('nickname', models.CharField(max_length=16)),
                ('email', models.CharField(max_length=32)),
                ('image', models.CharField(max_length=500)),
            ],
            options={
                'db_table': 'user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserCategories',
            fields=[
                ('user_categories_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'user_categories',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserKeywords',
            fields=[
                ('user_keywords_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'user_keywords',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserPlace',
            fields=[
                ('visited_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'user_place',
                'managed': False,
            },
        ),
    ]
